{"version":3,"sources":["bionicle.js"],"names":[],"mappings":"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","file":"bionicle.js","sourcesContent":["(function () {\n    'use strict';\n\n    var config = {\r\n        width: 400,\r\n        height: 240,\r\n        atlasWidth: 2048,\r\n        atlasHeight: 2048\r\n    };\n\n    // Set up our document\r\n    const canvas = document.createElement('canvas');\r\n    const canvas2 = document.createElement('canvas');\r\n    document.body.appendChild(canvas);\r\n    document.body.appendChild(canvas2);\r\n    canvas.width = config.width;\r\n    canvas.height = config.height;\r\n    canvas2.width = config.width;\r\n    canvas2.height = config.height;\r\n\r\n    // Get GL Context\r\n    const gl = canvas.getContext('webgl',{\r\n        antialias: false\r\n    });\r\n    if (gl === null) {\r\n        throw new Error('Could not initialize WebGL!');\r\n    }\r\n\r\n    // Get 2D context\r\n    const ctx = canvas2.getContext('2d');\r\n    ctx.imageSmoothingEnabled = false;\r\n\r\n    // Resize canvas with the window\r\n    let scale = 1;\r\n    function resizeCanvas() {\r\n        if (window.innerWidth < window.innerHeight) {\r\n            scale = window.innerWidth/config.width;\r\n        } else {\r\n            scale = window.innerHeight/config.height;\r\n        }\r\n\r\n        // Option here: fill screen (stretch pixels) or keep to scale (fill or overflow)\r\n        scale = Math.max(Math.floor(scale),1);\r\n        canvas.width = config.width*scale;\r\n        canvas.height = config.height*scale;\r\n        canvas2.width = canvas.width;\r\n        canvas2.height = canvas.height;\r\n\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.setTransform(1,0,0,1,0,0); // Reset scale\r\n        ctx.scale(scale,scale);\r\n    }\r\n    resizeCanvas();\r\n    window.addEventListener('resize',resizeCanvas);\r\n    window.addEventListener('orientationchange',resizeCanvas);\n\n    var ImageSource = {\r\n    vertex:`\r\nattribute vec2 a_position;\r\nattribute vec2 a_texcoord;\r\n\r\nuniform mat3 u_positionMatrix;\r\nuniform mat3 u_texcoordMatrix;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);\r\n    v_texcoord = (u_texcoordMatrix*vec3(a_texcoord,1.0)).xy;\r\n}`,\r\n\r\n    fragment:`\r\nprecision mediump float;\r\n\r\nuniform sampler2D u_image;\r\nuniform vec4 u_blend;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(u_image,v_texcoord)*u_blend;\r\n}`\r\n    };\n\n    var PrimitiveSource = {\r\n    vertex:`\r\nattribute vec2 a_position;\r\n\r\nuniform mat3 u_positionMatrix;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);\r\n}`,\r\n\r\n    fragment:`\r\nprecision mediump float;\r\n\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}`\r\n    };\n\n    var SwapSource = {\r\n    vertex:`\r\n// No change from image shader here\r\nattribute vec2 a_position;\r\nattribute vec2 a_texcoord;\r\n\r\nuniform mat3 u_positionMatrix;\r\nuniform mat3 u_texcoordMatrix;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);\r\n    v_texcoord = (u_texcoordMatrix*vec3(a_texcoord,1.0)).xy;\r\n}`,\r\n\r\n    fragment: function(palLength,colorCount,injection) {return `\r\nprecision mediump float;\r\n\r\nuniform sampler2D u_image;\r\nuniform vec4 u_blend;\r\nuniform vec3 palette[${palLength}];\r\n\r\nuniform int u_paletteIndex;\r\n\r\nvarying vec2 v_texcoord;\r\n\r\nvoid main() {\r\n    // Get current frag color from texture\r\n    vec4 color = texture2D(u_image,v_texcoord);\r\n\r\n    // If color equals a value in our palette index...\r\n    for (int i = 0; i < ${colorCount}; i++) {\r\n        if (color.rgb == palette[i].rgb) {\r\n            // Set color to be equal to palette color\r\n            vec3 newCol = color.rgb;\r\n\r\n            // ew\r\n            // A conditional is injected for each palette, because array indices must be constant in glsl\r\n            ${injection}\r\n\r\n            color = vec4(newCol,color.a); // Preserve old alpha\r\n            break;\r\n        }\r\n    }\r\n\r\n    // Blend it and set\r\n    gl_FragColor = color*u_blend;\r\n}`\r\n    }};\n\n    const Matrix = {\r\n        /**\r\n         * Multiplies two 3x3 matrices together\r\n         * @param {number[]} a First matrix\r\n         * @param {number[]} b Second matrix\r\n         * @returns {number[]}\r\n         */\r\n        multiply: function(a, b) {\r\n            var a00 = a[0 * 3 + 0];\r\n            var a01 = a[0 * 3 + 1];\r\n            var a02 = a[0 * 3 + 2];\r\n            var a10 = a[1 * 3 + 0];\r\n            var a11 = a[1 * 3 + 1];\r\n            var a12 = a[1 * 3 + 2];\r\n            var a20 = a[2 * 3 + 0];\r\n            var a21 = a[2 * 3 + 1];\r\n            var a22 = a[2 * 3 + 2];\r\n\r\n            var b00 = b[0 * 3 + 0];\r\n            var b01 = b[0 * 3 + 1];\r\n            var b02 = b[0 * 3 + 2];\r\n            var b10 = b[1 * 3 + 0];\r\n            var b11 = b[1 * 3 + 1];\r\n            var b12 = b[1 * 3 + 2];\r\n            var b20 = b[2 * 3 + 0];\r\n            var b21 = b[2 * 3 + 1];\r\n            var b22 = b[2 * 3 + 2];\r\n         \r\n            return [\r\n              b00 * a00 + b01 * a10 + b02 * a20,\r\n              b00 * a01 + b01 * a11 + b02 * a21,\r\n              b00 * a02 + b01 * a12 + b02 * a22,\r\n              b10 * a00 + b11 * a10 + b12 * a20,\r\n              b10 * a01 + b11 * a11 + b12 * a21,\r\n              b10 * a02 + b11 * a12 + b12 * a22,\r\n              b20 * a00 + b21 * a10 + b22 * a20,\r\n              b20 * a01 + b21 * a11 + b22 * a21,\r\n              b20 * a02 + b21 * a12 + b22 * a22,\r\n            ];\r\n        },\r\n\r\n        /**\r\n         * Translates a matrix.\r\n         * @param {number[]} mat Matrix to translate\r\n         * @param {number} tx X-translation\r\n         * @param {number} ty Y-translation\r\n         * @returns {number[]}\r\n         */\r\n        translation: function(mat,tx,ty) {\r\n            return Matrix.multiply(mat,\r\n            [   1, 0, 0,\r\n                0, 1, 0,\r\n                tx, ty, 1\r\n            ]);\r\n        },\r\n        \r\n        /**\r\n         * Rotates a matrix.\r\n         * @param {number[]} mat Matrix to rotate\r\n         * @param {number} angleInRadians \r\n         * @returns {number[]}\r\n         */\r\n        rotation: function(mat,angleInRadians) {\r\n            var c = Math.cos(angleInRadians);\r\n            var s = Math.sin(angleInRadians);\r\n            return Matrix.multiply(mat,\r\n            [   c,-s, 0,\r\n                s, c, 0,\r\n                0, 0, 1\r\n            ]);\r\n        },\r\n        \r\n        /**\r\n         * Scales a matrix.\r\n         * @param {number[]} mat Matrix to scale\r\n         * @param {number} sx Scale factor X\r\n         * @param {number} sy Scale factor Y\r\n         * @returns {number[]}\r\n         */\r\n        scaling: function(mat,sx,sy) {\r\n            return Matrix.multiply(mat,\r\n            [   sx, 0, 0,\r\n                0, sy, 0,\r\n                0, 0, 1\r\n            ]);\r\n        },\r\n\r\n        projection: [\r\n            2/config.width, 0, 0,\r\n            0, -2/config.height, 0,\r\n            -1, 1, 1\r\n        ],\r\n\r\n        identity: [\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1\r\n        ]\r\n    };\n\n    // Shader class\r\n    /** @type {Shader} */\r\n    let currentShader = null;\r\n    class Shader {\r\n        constructor(vertexSource,fragmentSource) {\r\n            this.program = this.createShaderProgram(vertexSource,fragmentSource);\r\n        }\r\n\r\n        use() {\r\n            if (currentShader !== this) {\r\n                currentShader = this;\r\n                gl.useProgram(this.program);\r\n            }\r\n        }\r\n\r\n        createShaderProgram(vertexSource,fragmentSource) {\r\n            const vertexShader = this.createShader(gl.VERTEX_SHADER,vertexSource);\r\n            const fragmentShader = this.createShader(gl.FRAGMENT_SHADER,fragmentSource);\r\n            const program = gl.createProgram();\r\n            gl.attachShader(program,vertexShader);\r\n            gl.attachShader(program,fragmentShader);\r\n            gl.linkProgram(program);\r\n\r\n            if (gl.getProgramParameter(program,gl.LINK_STATUS)) {\r\n                // Success\r\n                return program;\r\n            } else {\r\n                // Failure\r\n                const error = gl.getProgramInfoLog(program);\r\n                gl.deleteProgram(program);\r\n                throw new Error(`Could not link shader program: ${error}`);\r\n            }\r\n        }\r\n\r\n        createShader(type,source) {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader,source);\r\n            gl.compileShader(shader);\r\n            if (gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {\r\n                // Success\r\n                return shader;\r\n            } else {\r\n                // Failure\r\n                const error = gl.getShaderInfoLog(shader);\r\n                gl.deleteShader(shader);\r\n                throw new Error(`Could not compile shader: ${error}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    function makeImageShader(src) {\r\n        const shader = new Shader(src.vertex,src.fragment);\r\n        // Get attributes and uniforms\r\n        shader.positionAttribute = gl.getAttribLocation(shader.program,'a_position');\r\n        shader.textureAttribute = gl.getAttribLocation(shader.program,'a_texcoord');\r\n        shader.positionMatrix = gl.getUniformLocation(shader.program,'u_positionMatrix');\r\n        shader.textureMatrix = gl.getUniformLocation(shader.program,'u_texcoordMatrix');\r\n        shader.blendUniform = gl.getUniformLocation(shader.program,'u_blend');\r\n\r\n        // Put the same buffer data into each attribute\r\n        // This will not change, since each image is drawn the same way.\r\n        shader.buffer = gl.createBuffer();\r\n        const positionOrder = new Float32Array([\r\n            0, 0,  0, 1,  1, 1,\r\n            1, 1,  1, 0,  0, 0,\r\n        ]);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER,shader.buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER,positionOrder,gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(shader.positionAttribute);\r\n        gl.vertexAttribPointer(shader.positionAttribute,2,gl.FLOAT,false,0,0);\r\n\r\n        gl.enableVertexAttribArray(shader.textureAttribute);\r\n        gl.vertexAttribPointer(shader.textureAttribute,2,gl.FLOAT,false,0,0);\r\n\r\n        shader.use = function() {\r\n            // Override's class use function to reset properly\r\n            if (currentShader !== this) {\r\n                currentShader = this;\r\n                gl.useProgram(this.program);\r\n\r\n                // Reset proper attributes, in case we were last using the primitive shader\r\n                gl.bindBuffer(gl.ARRAY_BUFFER,shader.buffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(positionOrder),gl.STATIC_DRAW);\r\n                gl.vertexAttribPointer(primitiveShader.positionAttribute,2,gl.FLOAT,false,0,0);\r\n            }\r\n        };\r\n\r\n        return shader;\r\n    }\r\n\r\n    function makePrimitiveShader() {\r\n        const shader = new Shader(PrimitiveSource.vertex,PrimitiveSource.fragment);\r\n        shader.positionAttribute = gl.getAttribLocation(shader.program,'a_position');\r\n        shader.positionMatrix = gl.getUniformLocation(shader.program,'u_positionMatrix');\r\n        shader.colorUniform = gl.getUniformLocation(shader.program,'u_color');\r\n\r\n        shader.buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER,shader.buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([0,0, 0.5,0.5]),gl.DYNAMIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(shader.positionAttribute);\r\n        gl.vertexAttribPointer(shader.positionAttribute,2,gl.FLOAT,false,0,0);\r\n\r\n        // Set the position uniform once here. All the position does it change to clipspace\r\n        shader.use();\r\n        gl.uniformMatrix3fv(shader.positionMatrix,false,Matrix.projection);\r\n\r\n        return shader;\r\n    }\r\n\r\n    function makeSwapShader() {\r\n        // Reconfigure these options if you want to change palettes at any point\r\n        const paletteCount = 7;\r\n        // Current palettes:\r\n        //  0 - default colors\r\n        //  1 - Tahu\r\n        //  2 - Pohatu\r\n        //  3 - Onua\r\n        //  4 - Kopaka\r\n        //  5 - Gali\r\n        //  6 - Lewa\r\n        const colorCount = 9;\r\n        // Current colors per palette (IN THIS ORDER):\r\n        //  0 - light primary\r\n        //  1 - primary\r\n        //  2 - dark primary\r\n        //  3 - light eye\r\n        //  4 - eye color\r\n        //  5 - dark eye\r\n        //  6 - light secondary\r\n        //  7 - secondary\r\n        //  8 - dark secondary\r\n\r\n        const paletteLength = paletteCount*colorCount;\r\n        const colors = new Array(paletteLength);\r\n\r\n        let i = 0;\r\n        let factor = 0.2;\r\n        function feed(hexString) {\r\n            // Feeds in one color as an array from a hex string\r\n            const r = parseInt(hexString.slice(0,2),16) / 255;\r\n            const g = parseInt(hexString.slice(2,4),16) / 255;\r\n            const b = parseInt(hexString.slice(4,6),16) / 255;\r\n            colors[i] = [r,g,b];\r\n            i++;\r\n        }\r\n        function feed3(hexString) {\r\n            // Feeds three colors in based on one: first color is lighter, middle is the argument, third is darker\r\n            let r = parseInt(hexString.slice(0,2),16) / 255;\r\n            let g = parseInt(hexString.slice(2,4),16) / 255;\r\n            let b = parseInt(hexString.slice(4,6),16) / 255;\r\n            colors[i] = [Math.min(1,r+factor), Math.min(1,g+factor), Math.min(1,b+factor)];\r\n            colors[i+1] = [r, g, b];\r\n            colors[i+2] = [Math.max(0,r-factor), Math.max(0,g-factor), Math.max(0,b-factor)];\r\n            i += 3;\r\n        }\r\n        let startTime = Date.now();\r\n\r\n        // SET COLORS HERE\r\n        // default palette: these MUST match colors in sprites you swap in the atlas!\r\n        feed('ffffff');\r\n        feed('ababab');\r\n        feed('545454');\r\n        feed('ddf097');\r\n        feed('a4bd46');\r\n        feed('61702a');\r\n        feed('010101'); //placeholder\r\n        feed('010102');\r\n        feed('010103');\r\n        \r\n        // Tahu\r\n        feed3('c4281b');\r\n        feed3('c470a0');\r\n        feed3('da8540');\r\n\r\n        // Pohatu\r\n        feed3('675237');\r\n        feed3('da8540');\r\n        feed3('d7c599');\r\n\r\n        // Onua\r\n        feed3('1b2a34');\r\n        feed3('287f46');\r\n        feed3('6d6e6c');\r\n\r\n        // Kopaka\r\n        feed3('d0d1d0');\r\n        feed3('6e99c9');\r\n        feed3('a1a5a2');\r\n\r\n        // Gali\r\n        feed3('0d69ab');\r\n        feed3('f5cd2f');\r\n        feed3('6e99c9');\r\n\r\n        // Lewa\r\n        feed3('287f46');\r\n        feed3('c7d23c');\r\n        feed3('a4bd46');\r\n\r\n        let injection = '';\r\n        for (let i = 1; i < paletteCount; i++) {\r\n            // Inject a conditional for each possible palette\r\n            // We have to do this because we can't use a uniform in array index in glsl, yikes.\r\n            injection += `if (u_paletteIndex == ${i}) {\r\n            newCol = palette[i+(${i}*${colorCount})];\r\n        }\\n`;\r\n        }\r\n\r\n        // babel wouldn't let me just throw vertex/fragment in as arguments\r\n        // so instead let's overwrite fragment function with the proper fragment source\r\n        const temp = SwapSource.fragment(paletteLength,colorCount,injection);\r\n        SwapSource.fragment = temp;\r\n        const shader = makeImageShader(SwapSource);\r\n        shader.use();\r\n\r\n        // Load the uniform\r\n        for (let i = 0; i < paletteLength; i++) {\r\n            // This has to happen for every color... dozens of times. Because there's no way to set a full glsl array\r\n            // Each array index has to be set individually. yikes.\r\n            // Grab the location for this index of our palette\r\n            const location = gl.getUniformLocation(shader.program,`palette[${i}]`);\r\n\r\n            // Load it with our four channels for each color\r\n            gl.uniform3fv(location,colors[i]);\r\n        }\r\n\r\n        shader.paletteUniform = gl.getUniformLocation(shader.program,`u_paletteIndex`);\r\n\r\n        // To do later: pre-compile the full color list when you're deploying\r\n        // Also to-do later: figure out a better way to palette swap.\r\n        //  Because this is tedious and far from optimal, but hey it works\r\n        console.log(`Compiled, calculated and placed ${paletteLength} colors in shader uniform in ${Date.now()-startTime}ms`);\r\n\r\n        return shader;\r\n    }\r\n\r\n    // More shader make functions here\r\n\r\n    const primitiveShader = makePrimitiveShader();\r\n    const swapShader = makeSwapShader();\r\n    const imageShader = makeImageShader(ImageSource);\n\n    /**\r\n     * Asynchronously loads a new texture and configures it.\r\n     * @param {string} url \r\n     * @returns {WebGLTexture}\r\n     */\r\n    async function loadTexture(url) {\r\n        return new Promise(function(resolve,reject) {\r\n            const texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D,texture);\r\n            gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\r\n\r\n            const image = new Image();\r\n            image.src = url;\r\n            image.addEventListener('load',function() {\r\n                gl.bindTexture(gl.TEXTURE_2D,texture);\r\n                gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);\r\n                resolve(texture);\r\n            });\r\n            image.addEventListener('error',function(err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Set up drawing\r\n    gl.clearColor(0,0,0,1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    // Set up game texture\r\n    const gameTexture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D,gameTexture);\r\n    gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\r\n    gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,config.width,config.height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);\r\n    const gameTexturePositionMatrix = [2, 0, 0, 0, -2, 0, -1, 1, 1];\r\n    const gameTextureIdentityMatrix = [1, 0, 0, 0, -1, 0, 0, 1, 1];\r\n    let gameTextureBlend = [1,1,1,1];\r\n\r\n    // Set up our framebuffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,gameTexture,0);\r\n\r\n    /**\r\n     * Sets framebuffer and viewport for drawing to the game texture.\r\n     * @param {WebGLTexture} atlasTexture Texture to use as atlas for all further draw calls\r\n     */\r\n    function beginRender(atlasTexture) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffer);\r\n        gl.viewport(0,0,config.width,config.height);\r\n        gl.clearColor(0,0,0,1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        ctx.clearRect(0,0,config.width,config.height);\r\n        ctx.save();\r\n        gl.bindTexture(gl.TEXTURE_2D,atlasTexture);\r\n        imageShader.use();\r\n        gl.uniform4f(imageShader.blendUniform,1,1,1,1);\r\n    }\r\n\r\n    /**\r\n     * Draws what's on the game texture to the screen.\r\n     */\r\n    function drawGameTexture() {\r\n        // Switch to right framebuffer and texture\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER,null);\r\n        gl.viewport(0,0,canvas.width,canvas.height);\r\n        gl.clearColor(0,0,0,0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        gl.bindTexture(gl.TEXTURE_2D,gameTexture);\r\n        \r\n        // Use the right shader and set our precalculated matrices\r\n        imageShader.use();\r\n\r\n        // Update our bound buffer to the correct type\r\n        gl.bindBuffer(gl.ARRAY_BUFFER,imageShader.buffer);\r\n        gl.enableVertexAttribArray(imageShader.positionAttribute);\r\n        gl.vertexAttribPointer(imageShader.positionAttribute,2,gl.FLOAT,false,0,0);\r\n\r\n        // Update uniforms and draw the arrays\r\n        gl.uniformMatrix3fv(imageShader.positionMatrix,false,gameTexturePositionMatrix);\r\n        gl.uniformMatrix3fv(imageShader.textureMatrix,false,gameTextureIdentityMatrix);\r\n        gl.uniform4fv(imageShader.blendUniform,gameTextureBlend);\r\n        gl.drawArrays(gl.TRIANGLES,0,6);\r\n        ctx.restore();\r\n    }\n\n    var ATLAST = [\n      {\n        \"name\": \"head\",\n        \"width\": 40,\n        \"height\": 40,\n        \"images\": [\n          {\n            \"x\": 0,\n            \"y\": 0\n          },\n          {\n            \"x\": 48,\n            \"y\": 0\n          },\n          {\n            \"x\": 96,\n            \"y\": 0\n          },\n          {\n            \"x\": 144,\n            \"y\": 0\n          }\n        ]\n      },\n      {\n        \"name\": \"kanohi\",\n        \"width\": 40,\n        \"height\": 40,\n        \"images\": [\n          {\n            \"x\": 192,\n            \"y\": 0\n          },\n          {\n            \"x\": 240,\n            \"y\": 0\n          },\n          {\n            \"x\": 288,\n            \"y\": 0\n          },\n          {\n            \"x\": 336,\n            \"y\": 0\n          },\n          {\n            \"x\": 384,\n            \"y\": 0\n          },\n          {\n            \"x\": 432,\n            \"y\": 0\n          }\n        ]\n      }\n    ];\n\n    class Sprite {\r\n        constructor(name,width,height,images) {\r\n            this.name = name;\r\n            this.width = width;\r\n            this.height = height;\r\n            this.images = images;\r\n\r\n            for (let i = 0; i < this.images.length; i++) {\r\n                // Generate texture matrices for each image\r\n                let mat = Matrix.identity;\r\n                mat = Matrix.translation(mat, images[i].x/config.atlasWidth, images[i].y/config.atlasHeight);\r\n                mat = Matrix.scaling(mat, this.width/config.atlasWidth, this.height/config.atlasHeight);\r\n                this.images[i].textureMatrix = mat;\r\n            }\r\n        }\r\n    }\r\n\r\n    function limitImage(spr,image) {\r\n        image = Math.floor(image);\r\n        if (!spr.images[image]) {\r\n            image -= spr.images.length;\r\n        }\r\n        return image;\r\n    }\r\n\r\n    /**\r\n     * Draws a sprite to the WebGL canvas, recolored by a given palette index.\r\n     * @param {Sprite} sprite Sprite resource to draw\r\n     * @param {number} image Image index of the sprite to draw\r\n     * @param {number} x Absolute x on canvas\r\n     * @param {number} y Absolute y on canvas\r\n     * @param {number} palette Palette index to recolor the sprite to\r\n     * @param {number} a Alpha channel\r\n     * @param {number} [r] Red channel blend\r\n     * @param {number} [g] Green channel blend\r\n     * @param {number} [b] Blue channel blend\r\n     * @param {transformFnCallback} [transformFn] Callback to apply transformations to the position matrix\r\n     */\r\n    function drawSpriteSwap(sprite,image,x,y,palette = 0,a = 1,r = 1,g = 1,b = 1,transformFn = null) {\r\n        swapShader.use();\r\n        image = limitImage(sprite,image);\r\n\r\n        // Set position matrix\r\n        let mat = Matrix.projection;\r\n        mat = Matrix.translation(mat,x,y);\r\n        mat = Matrix.scaling(mat,sprite.width,sprite.height);\r\n        \r\n        // Optional transformation\r\n        if (transformFn) {\r\n            mat = transformFn(mat);\r\n        }\r\n\r\n        gl.uniformMatrix3fv(swapShader.positionMatrix,false,mat);\r\n\r\n        // Set texture matrix\r\n        gl.uniformMatrix3fv(swapShader.textureMatrix,false,sprite.images[image].textureMatrix);\r\n\r\n        // Set blend\r\n        gl.uniform4f(swapShader.blendUniform,r,g,b,a);\r\n\r\n        // Set palette index\r\n        gl.uniform1i(swapShader.paletteUniform,palette);\r\n\r\n        gl.drawArrays(gl.TRIANGLES,0,6);\r\n    }\r\n\r\n    // More sprite drawing goes here - functions with transformations build in\r\n    // Or even better: make a \"startDraw\" and an \"endDraw\" that allows you to apply whatever transformations you want.\r\n\r\n    // Load all sprites from our atlas map\r\n    const spr = {};\r\n    for (let index in ATLAST) {\r\n        const sprite = ATLAST[index];\r\n        spr[sprite.name] = new Sprite(sprite.name,sprite.width,sprite.height,sprite.images);\r\n    }\n\n    // Main loop\r\n    function main() {\r\n        // Set rendering on framebuffer and with correct texture\r\n        beginRender(texture);\r\n\r\n        for (let y = 0; y < 6; y++) {\r\n            for (let x = 0; x < 6; x++) {\r\n                drawSpriteSwap(spr.head,0,20+(40*x),(40*y),y+1);\r\n                drawSpriteSwap(spr.kanohi,x,20+(40*x),(40*y),y+1);\r\n            }\r\n        }\r\n\r\n        // To do next:\r\n        // - migrate to a better project environment\r\n        // - draw some sweet HUD elements built of lego technic parts\r\n        //  - while you're at it, make your own atlas generation script.\r\n\r\n        drawGameTexture();\r\n        requestAnimationFrame(main);\r\n    }\r\n\r\n    // Launch\r\n    let texture = null;\r\n    (async () => {\r\n\r\n        // Loading resources here\r\n        texture = await loadTexture('../asset/atlas.png');\r\n\r\n        main();\r\n    })();\n\n}());\n"]}