(function(){'use strict';function s(){i=window.innerWidth<window.innerHeight?window.innerWidth/g.width:window.innerHeight/g.height,i=K(f(i),1),h.width=g.width*i,h.height=g.height*i,j.width=h.width,j.height=h.height,k.imageSmoothingEnabled=!1,k.setTransform(1,0,0,1,0,0),k.scale(i,i)}function x(d){const a=new q(d.vertex,d.fragment);a.positionAttribute=L.getAttribLocation(a.program,"a_position"),a.textureAttribute=L.getAttribLocation(a.program,"a_texcoord"),a.positionMatrix=L.getUniformLocation(a.program,"u_positionMatrix"),a.textureMatrix=L.getUniformLocation(a.program,"u_texcoordMatrix"),a.blendUniform=L.getUniformLocation(a.program,"u_blend"),a.buffer=L.createBuffer();const b=new Float32Array([0,0,0,1,1,1,1,1,1,0,0,0]);return L.bindBuffer(L.ARRAY_BUFFER,a.buffer),L.bufferData(L.ARRAY_BUFFER,b,L.STATIC_DRAW),L.enableVertexAttribArray(a.positionAttribute),L.vertexAttribPointer(a.positionAttribute,2,L.FLOAT,!1,0,0),L.enableVertexAttribArray(a.textureAttribute),L.vertexAttribPointer(a.textureAttribute,2,L.FLOAT,!1,0,0),a.use=function(){n!==this&&(n=this,L.useProgram(this.program),L.bindBuffer(L.ARRAY_BUFFER,a.buffer),L.bufferData(L.ARRAY_BUFFER,new Float32Array(b),L.STATIC_DRAW),L.vertexAttribPointer(r.positionAttribute,2,L.FLOAT,!1,0,0))},a}async function a(f){return new Promise(function(a,b){const c=L.createTexture();L.bindTexture(L.TEXTURE_2D,c),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_MAG_FILTER,L.NEAREST),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_MIN_FILTER,L.NEAREST),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_WRAP_S,L.CLAMP_TO_EDGE),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_WRAP_T,L.CLAMP_TO_EDGE);const d=new Image;d.src=f,d.addEventListener("load",function(){L.bindTexture(L.TEXTURE_2D,c),L.texImage2D(L.TEXTURE_2D,0,L.RGBA,L.RGBA,L.UNSIGNED_BYTE,d),a(c)}),d.addEventListener("error",function(c){b(c)})})}function b(b){L.bindFramebuffer(L.FRAMEBUFFER,C),L.viewport(0,0,g.width,g.height),L.clearColor(0,0,0,1),L.clear(L.COLOR_BUFFER_BIT),k.clearRect(0,0,g.width,g.height),k.save(),L.bindTexture(L.TEXTURE_2D,b),v.use(),L.uniform4f(v.blendUniform,1,1,1,1)}function c(){L.bindFramebuffer(L.FRAMEBUFFER,null),L.viewport(0,0,h.width,h.height),L.clearColor(0,0,0,0),L.clear(L.COLOR_BUFFER_BIT),L.bindTexture(L.TEXTURE_2D,w),v.use(),L.bindBuffer(L.ARRAY_BUFFER,v.buffer),L.enableVertexAttribArray(v.positionAttribute),L.vertexAttribPointer(v.positionAttribute,2,L.FLOAT,!1,0,0),L.uniformMatrix3fv(v.positionMatrix,!1,z),L.uniformMatrix3fv(v.textureMatrix,!1,A),L.uniform4fv(v.blendUniform,B),L.drawArrays(L.TRIANGLES,0,6),k.restore()}function y(c,a){return a=f(a),c.images[a]||(a-=c.images.length),a}function d(f,c,n,e,h=0,i=1,j=1,a=1,k=1,g=null){t.use(),c=y(f,c);let b=m.projection;b=m.translation(b,n,e),b=m.scaling(b,f.width,f.height),g&&(b=g(b)),L.uniformMatrix3fv(t.positionMatrix,!1,b),L.uniformMatrix3fv(t.textureMatrix,!1,f.images[c].textureMatrix),L.uniform4f(t.blendUniform,j,a,k,i),L.uniform1i(t.paletteUniform,h),L.drawArrays(L.TRIANGLES,0,6)}function e(){b(G);for(let c=0;6>c;c++)for(let a=0;6>a;a++)d(F.head,0,20+40*a,40*c,c+1),d(F.kanohi,a,20+40*a,40*c,c+1);c(),requestAnimationFrame(e)}var K=Math.max,f=Math.floor,g={width:400,height:240,atlasWidth:2048,atlasHeight:2048};const h=document.createElement("canvas"),j=document.createElement("canvas");document.body.appendChild(h),document.body.appendChild(j),h.width=g.width,h.height=g.height,j.width=g.width,j.height=g.height;const L=h.getContext("webgl",{antialias:!1});if(null===L)throw new Error("Could not initialize WebGL!");const k=j.getContext("2d");k.imageSmoothingEnabled=!1;let i=1;s(),window.addEventListener("resize",s),window.addEventListener("orientationchange",s);var l={vertex:`
attribute vec2 a_position;

uniform mat3 u_positionMatrix;

void main() {
    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);
}`,fragment:`
precision mediump float;

uniform vec4 u_color;

void main() {
    gl_FragColor = u_color;
}`},o={vertex:`
// No change from image shader here
attribute vec2 a_position;
attribute vec2 a_texcoord;

uniform mat3 u_positionMatrix;
uniform mat3 u_texcoordMatrix;

varying vec2 v_texcoord;

void main() {
    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);
    v_texcoord = (u_texcoordMatrix*vec3(a_texcoord,1.0)).xy;
}`,fragment:function(d,a,b){return`
precision mediump float;

uniform sampler2D u_image;
uniform vec4 u_blend;
uniform vec3 palette[${d}];

uniform int u_paletteIndex;

varying vec2 v_texcoord;

void main() {
    // Get current frag color from texture
    vec4 color = texture2D(u_image,v_texcoord);

    // If color equals a value in our palette index...
    for (int i = 0; i < ${a}; i++) {
        if (color.rgb == palette[i].rgb) {
            // Set color to be equal to palette color
            vec3 newCol = color.rgb;

            // ew
            // A conditional is injected for each palette, because array indices must be constant in glsl
            ${b}

            color = vec4(newCol,color.a); // Preserve old alpha
            break;
        }
    }

    // Blend it and set
    gl_FragColor = color*u_blend;
}`}};const m={multiply:function(u,c){var a=u[0],b=u[1],d=u[2],e=u[3],f=u[4],g=u[5],h=u[6],i=u[7],j=u[8],k=c[0],l=c[1],m=c[2],n=c[3],o=c[4],p=c[5],q=c[6],r=c[7],s=c[8];return[k*a+l*e+m*h,k*b+l*f+m*i,k*d+l*g+m*j,n*a+o*e+p*h,n*b+o*f+p*i,n*d+o*g+p*j,q*a+r*e+s*h,q*b+r*f+s*i,q*d+r*g+s*j]},translation:function(d,a,b){return m.multiply(d,[1,0,0,0,1,0,a,b,1])},rotation:function(e,a){var b=Math.cos(a),d=Math.sin(a);return m.multiply(e,[b,-d,0,d,b,0,0,0,1])},scaling:function(d,a,b){return m.multiply(d,[a,0,0,0,b,0,0,0,1])},projection:[2/g.width,0,0,0,-2/g.height,0,-1,1,1],identity:[1,0,0,0,1,0,0,0,1]};let n=null;class q{constructor(c,a){this.program=this.createShaderProgram(c,a)}use(){n!==this&&(n=this,L.useProgram(this.program))}createShaderProgram(f,a){const b=this.createShader(L.VERTEX_SHADER,f),c=this.createShader(L.FRAGMENT_SHADER,a),d=L.createProgram();if(L.attachShader(d,b),L.attachShader(d,c),L.linkProgram(d),L.getProgramParameter(d,L.LINK_STATUS))return d;else{const b=L.getProgramInfoLog(d);throw L.deleteProgram(d),new Error(`Could not link shader program: ${b}`)}}createShader(d,a){const b=L.createShader(d);if(L.shaderSource(b,a),L.compileShader(b),L.getShaderParameter(b,L.COMPILE_STATUS))return b;else{const c=L.getShaderInfoLog(b);throw L.deleteShader(b),new Error(`Could not compile shader: ${c}`)}}}const r=function(){const b=new q(l.vertex,l.fragment);return b.positionAttribute=L.getAttribLocation(b.program,"a_position"),b.positionMatrix=L.getUniformLocation(b.program,"u_positionMatrix"),b.colorUniform=L.getUniformLocation(b.program,"u_color"),b.buffer=L.createBuffer(),L.bindBuffer(L.ARRAY_BUFFER,b.buffer),L.bufferData(L.ARRAY_BUFFER,new Float32Array([0,0,.5,.5]),L.DYNAMIC_DRAW),L.enableVertexAttribArray(b.positionAttribute),L.vertexAttribPointer(b.positionAttribute,2,L.FLOAT,!1,0,0),b.use(),L.uniformMatrix3fv(b.positionMatrix,!1,m.projection),b}(),t=function(){function b(b){const a=parseInt(b.slice(0,2),16)/255,c=parseInt(b.slice(2,4),16)/255,d=parseInt(b.slice(4,6),16)/255;i[f]=[a,c,d],f++}function a(b){var a=Math.min;let c=parseInt(b.slice(0,2),16)/255,d=parseInt(b.slice(2,4),16)/255,e=parseInt(b.slice(4,6),16)/255;i[f]=[a(1,c+j),a(1,d+j),a(1,e+j)],i[f+1]=[c,d,e],i[f+2]=[K(0,c-j),K(0,d-j),K(0,e-j)],f+=3}const i=Array(63);let f=0,j=.2,c=Date.now();b("ffffff"),b("ababab"),b("545454"),b("ddf097"),b("a4bd46"),b("61702a"),b("010101"),b("010102"),b("010103"),a("c4281b"),a("c470a0"),a("da8540"),a("675237"),a("da8540"),a("d7c599"),a("1b2a34"),a("287f46"),a("6d6e6c"),a("d0d1d0"),a("6e99c9"),a("a1a5a2"),a("0d69ab"),a("f5cd2f"),a("6e99c9"),a("287f46"),a("c7d23c"),a("a4bd46");let d="";for(let b=1;7>b;b++)d+=`if (u_paletteIndex == ${b}) {
            newCol = palette[i+(${b}*${9})];
        }\n`;const e=o.fragment(63,9,d);o.fragment=e;const g=x(o);g.use();for(let c=0;c<63;c++){const a=L.getUniformLocation(g.program,`palette[${c}]`);L.uniform3fv(a,i[c])}return g.paletteUniform=L.getUniformLocation(g.program,`u_paletteIndex`),console.log(`Compiled, calculated and placed ${63} colors in shader uniform in ${Date.now()-c}ms`),g}(),v=x({vertex:`
attribute vec2 a_position;
attribute vec2 a_texcoord;

uniform mat3 u_positionMatrix;
uniform mat3 u_texcoordMatrix;

varying vec2 v_texcoord;

void main() {
    gl_Position = vec4((u_positionMatrix*vec3(a_position,1)).xy,0,1);
    v_texcoord = (u_texcoordMatrix*vec3(a_texcoord,1.0)).xy;
}`,fragment:`
precision mediump float;

uniform sampler2D u_image;
uniform vec4 u_blend;

varying vec2 v_texcoord;

void main() {
    gl_FragColor = texture2D(u_image,v_texcoord)*u_blend;
}`});L.clearColor(0,0,0,1),L.clear(L.COLOR_BUFFER_BIT),L.disable(L.DEPTH_TEST),L.enable(L.BLEND),L.blendFunc(L.SRC_ALPHA,L.ONE_MINUS_SRC_ALPHA);const w=L.createTexture();L.bindTexture(L.TEXTURE_2D,w),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_MAG_FILTER,L.NEAREST),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_MIN_FILTER,L.NEAREST),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_WRAP_S,L.CLAMP_TO_EDGE),L.texParameteri(L.TEXTURE_2D,L.TEXTURE_WRAP_T,L.CLAMP_TO_EDGE),L.texImage2D(L.TEXTURE_2D,0,L.RGBA,g.width,g.height,0,L.RGBA,L.UNSIGNED_BYTE,null);const z=[2,0,0,0,-2,0,-1,1,1],A=[1,0,0,0,-1,0,0,1,1];let B=[1,1,1,1];const C=L.createFramebuffer();L.bindFramebuffer(L.FRAMEBUFFER,C),L.framebufferTexture2D(L.FRAMEBUFFER,L.COLOR_ATTACHMENT0,L.TEXTURE_2D,w,0);var D=[{name:"head",width:40,height:40,images:[{x:0,y:0},{x:48,y:0},{x:96,y:0},{x:144,y:0}]},{name:"kanohi",width:40,height:40,images:[{x:192,y:0},{x:240,y:0},{x:288,y:0},{x:336,y:0},{x:384,y:0},{x:432,y:0}]}];class E{constructor(e,a,b,c){this.name=e,this.width=a,this.height=b,this.images=c;for(let d,h=0;h<this.images.length;h++)d=m.identity,d=m.translation(d,c[h].x/g.atlasWidth,c[h].y/g.atlasHeight),d=m.scaling(d,this.width/g.atlasWidth,this.height/g.atlasHeight),this.images[h].textureMatrix=d}}const F={};for(let c in D){const a=D[c];F[a.name]=new E(a.name,a.width,a.height,a.images)}let G=null;(async()=>{G=await a("../asset/atlas.png"),e()})()})();