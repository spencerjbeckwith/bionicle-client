import Matrix from"./util/matrix.js";import ATLAST from"./atlas.js";import config from"./config.js";import{imageShader,swapShader}from"./shader/init.js";import{gl}from"./shader/gl.js";class Sprite{constructor(a,b,c,d){this.name=a,this.width=b,this.height=c,this.images=d;for(let e,f=0;f<this.images.length;f++)e=Matrix.identity,e=Matrix.translation(e,d[f].x/config.atlasWidth,d[f].y/config.atlasHeight),e=Matrix.scaling(e,this.width/config.atlasWidth,this.height/config.atlasHeight),this.images[f].textureMatrix=e}}function limitImage(a,b){var c=Math.floor;return b=c(b),a.images[b]||(b-=a.images.length),b}function drawSprite(c,d,e,f,h=1,a=1,i=1,g=1,b=null){imageShader.use(),d=limitImage(c,d);let j=Matrix.projection;j=Matrix.translation(j,e,f),j=Matrix.scaling(j,c.width,c.height),b&&(j=b(j)),gl.uniformMatrix3fv(imageShader.positionMatrix,!1,j),gl.uniformMatrix3fv(imageShader.textureMatrix,!1,c.images[d].textureMatrix),gl.uniform4f(imageShader.blendUniform,a,i,g,h),gl.drawArrays(gl.TRIANGLES,0,6)}function drawSpriteSwap(c,d,e,f,h=0,i=1,a=1,j=1,g=1,b=null){swapShader.use(),d=limitImage(c,d);let k=Matrix.projection;k=Matrix.translation(k,e,f),k=Matrix.scaling(k,c.width,c.height),b&&(k=b(k)),gl.uniformMatrix3fv(swapShader.positionMatrix,!1,k),gl.uniformMatrix3fv(swapShader.textureMatrix,!1,c.images[d].textureMatrix),gl.uniform4f(swapShader.blendUniform,a,j,g,i),gl.uniform1i(swapShader.paletteUniform,h),gl.drawArrays(gl.TRIANGLES,0,6)}const spr={};for(let a in ATLAST){const b=ATLAST[a];spr[b.name]=new Sprite(b.name,b.width,b.height,b.images)}export{Sprite,drawSprite,drawSpriteSwap,spr};